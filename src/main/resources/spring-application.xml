<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-3.0.xsd  
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/task 
    http://www.springframework.org/schema/task/spring-task-3.0.xsd     
    http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 定时器开关 开始 -->
	<task:annotation-driven />
	<!-- 定时器开关 结束 -->
	<!-- 标注类型 的事务配置 -->
	<tx:annotation-driven />
	<!-- 读取资源文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 测试环境配置 -->
				<value>classpath*:/jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- cache -->
	<bean id="redisCache" class="com.github.flux.cache.impl.RedisCacheImpl"></bean>
	
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minPoolSize" value="20" />
		<property name="maxPoolSize" value="100" />
		<property name="maxIdleTime" value="1800" />
		<property name="acquireIncrement" value="5" />
		<property name="maxStatements" value="0" />
		<property name="initialPoolSize" value="20" />
		<property name="idleConnectionTestPeriod" value="1800" />
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>

	<bean id="pagePlugin" class="com.github.flux.plugin.mybatis.plugin.PagePlugin">
		<property name="properties">
			<props>
				<prop key="dialect">mysql</prop>
				<prop key="pageSqlId">.*query.*</prop>
			</props>
		</property>
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动匹配Mapper映射文件  **表示可以表示任意多级目录 如：classpath*:mappings/**/*Mapper.xml *表示多个任意字符 -->
		<property name="mapperLocations" value="classpath:mappings/*-mapper.xml" />
		<!-- 多个包可以用 ,; \t\n 分隔 -->
		<property name="typeAliasesPackage" value="com.github.flux.entity" />
		<property name="plugins">
			<array>
				<ref bean="pagePlugin" />
			</array>
		</property>
	</bean>
	<!-- 通过扫描的模式，扫描目录在com.github.flux.mapper目录下，所有的mapper都继承SqlMapper接口的接口， 
		这样一个bean就可以了 可以使用分号或逗号 作为分隔符设置多于一个的包路径 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.github.flux.mapper" />
	</bean>
	
	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<aop:config>
		<aop:pointcut
			expression="execution(public * com.github.flux.service.impl.*Impl.*(..))"
			id="pointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="logicDelById" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	 
	<!-- 使用Spring组件扫描的方式来实现自动注入bean -->
	
	<context:component-scan base-package="com.github.flux.service" />
	<!-- 隐式地向 Spring 容器注册 -->
	
	<context:annotation-config />
	
	
		<!-- service work time  调用方需要根据下面例子配置自己的扫描包路径 -->
	<bean id="workTimeCenter" class="com.github.flux.util.aoptime.WorkTimeCenter"></bean>
	
	<aop:config proxy-target-class="true">
		<aop:pointcut id="workTimeCenterMethod"
			expression="execution(* com.github.flux.service.*.*(..))" />
		<aop:advisor advice-ref="workTimeCenter" pointcut-ref="workTimeCenterMethod" />

	</aop:config>

	
	<!-- kaptcha -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">  
        <property name="config">  
            <bean class="com.google.code.kaptcha.util.Config">  
                <constructor-arg>  
                   <props>  
                        <prop key="kaptcha.border">yes</prop><!--边框 yes:有 no:没有--> 
                        <prop key="kaptcha.border.color">white</prop><!--边框颜色 可以设置（r,g,b）或者 white,black,blue.默认black-->
                        <prop key="kaptcha.textproducer.font.color">black</prop><!--字体颜色-->  
                        <prop key="kaptcha.image.width">125</prop><!--图片的宽度--> 
                        <prop key="kaptcha.image.height">45</prop><!--图片的高度-->  
                        <prop key="kaptcha.textproducer.font.size">40</prop>
                        <prop key="kaptcha.session.key">code</prop>  
                        <prop key="kaptcha.textproducer.char.length">4</prop>  
                        <prop key="kaptcha.textproducer.font.names">Arial, Courier</prop><!--字体列表-->
                    </props>  
                </constructor-arg>  
            </bean>  
        </property>  
    </bean>
    
	
</beans>