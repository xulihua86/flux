<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.flux.mapper.PrizeOutMapper" >

  <resultMap id="BaseResultMap" type="com.github.flux.entity.PrizeOut" >
    <id column="out_id" property="outId" jdbcType="VARCHAR" />
    <result column="userid" property="userid" jdbcType="BIGINT" />
    <result column="sum_num" property="sumNum" jdbcType="BIGINT" />
    <result column="out_num" property="outNum" jdbcType="BIGINT" />
    <result column="out_time" property="outTime" jdbcType="BIGINT" />
    <result column="return_num" property="returnNum" jdbcType="BIGINT" />
    <result column="return_time" property="returnTime" jdbcType="BIGINT" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    out_id outId, userid, sum_num sumNum, out_num outNum, out_time outTime, return_num returnNum, return_time returnTime
  </sql>
  
   <select id="query" resultType="PrizeOut" parameterType="java.util.HashMap">
		select
		<include refid="Base_Column_List" />
		from prize_out
		<where>
			
		</where>
		order by out_id desc
	</select>

	<select id="queryAll" resultType="PrizeOut">
		select
		<include refid="Base_Column_List" />
		from prize_out
		order by out_id desc
	</select>
	
  <select id="getById" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from prize_out
    where out_id = #{outId,jdbcType=VARCHAR}
  </select>
  
  <delete id="deleteById" parameterType="java.lang.String" >
    delete from prize_out
    where out_id = #{outId,jdbcType=VARCHAR}
  </delete>
  
  
  <insert id="add" parameterType="com.github.flux.entity.PrizeOut" >
    insert into prize_out (out_id, userid, sum_num, 
      out_num, out_time, return_num, 
      return_time)
    values (#{outId,jdbcType=VARCHAR}, #{userid,jdbcType=BIGINT}, #{sumNum,jdbcType=BIGINT}, 
      #{outNum,jdbcType=BIGINT}, #{outTime,jdbcType=BIGINT}, #{returnNum,jdbcType=BIGINT}, 
      #{returnTime,jdbcType=BIGINT})
  </insert>
  
  <update id="update" parameterType="com.github.flux.entity.PrizeOut" >
    update prize_out
    <set >
      <if test="userid != null" >
        userid = #{userid,jdbcType=BIGINT},
      </if>
      <if test="sumNum != null" >
        sum_num = #{sumNum,jdbcType=BIGINT},
      </if>
      <if test="outNum != null" >
        out_num = #{outNum,jdbcType=BIGINT},
      </if>
      <if test="outTime != null" >
        out_time = #{outTime,jdbcType=BIGINT},
      </if>
      <if test="returnNum != null" >
        return_num = #{returnNum,jdbcType=BIGINT},
      </if>
      <if test="returnTime != null" >
        return_time = #{returnTime,jdbcType=BIGINT},
      </if>
    </set>
    where out_id = #{outId,jdbcType=VARCHAR}
  </update>
  
</mapper>