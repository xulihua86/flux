<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.flux.mapper.AppointmentMessageMapper" >

  <resultMap id="BaseResultMap" type="com.github.flux.entity.AppointmentMessage" >
    <id column="message_id" property="messageId" jdbcType="BIGINT" />
    <result column="appointment_id" property="appointmentId" jdbcType="BIGINT" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="BIGINT" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    message_id messageId, appointment_id appointmentId, content, create_time createTime 
  </sql>
  
  
  	<select id="query" resultType="AppointmentMessage" parameterType="java.util.HashMap">
		select
		<include refid="Base_Column_List" />
		from appointment_message
		<where>
			
		</where>
		order by message_id desc
	</select>

	<select id="queryAll" resultType="AppointmentMessage">
		select
		<include refid="Base_Column_List" />
		from appointment_message
		order by message_id desc
	</select>
  
  <select id="getById" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from appointment_message
    where type_id = #{typeId,jdbcType=BIGINT}
  </select>
  
  <delete id="deleteById" parameterType="java.lang.Long" >
    delete from appointment_message
    where message_id = #{messageId,jdbcType=BIGINT}
  </delete>
  
  
  <insert id="add" parameterType="com.github.flux.entity.AppointmentMessage" useGeneratedKeys="true" keyProperty="message_id">
    insert into appointment_message (message_id, appointment_id, content,create_time
      )
    values (#{messageId,jdbcType=BIGINT},#{appointmentId,jdbcType=BIGINT}, #{content,jdbcType=VARCHAR}, #{createTime,jdbcType=BIGINT}
      )
  </insert>
  
  <update id="update" parameterType="com.github.flux.entity.AppointmentMessage" >
    update appointment_message
    <set >
      <if test="appointmentId != null" >
        appointment_id = #{appointmentId,jdbcType=BIGINT},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
    </set>
    where message_id = #{messageId,jdbcType=BIGINT}
  </update>
  
</mapper>